// Next Components
import Head from 'next/head';
import Image from 'next/image';

// Components
import Layout from '../components/Layout';
import ItemTrack from '../components/ItemTrack';
import ItemTrackSkeleton from '../components/ItemTrackSkeleton';

// Hooks
import { useEffect, useState } from 'react';

// Styles
import { container, tracksContainer } from '../styles/Search.module.css';
import { textMd, textWhite, textBold } from '../styles/utils.module.css';

// NextAuth
import { useSession } from 'next-auth/react';

// Axios
import axios from 'axios';

// SWR

import useSWR from 'swr';
const fetcher = async (...args) =>
	await axios.get(...args).then((res) => res.data);

export default function Home() {
	const { data: session, status } = useSession();
	const [query, updateQuery] = useState('');
	const { data: searchResults, error: searchResultsError } = useSWR(
		`api/search?query=${query}`,
		fetcher,
		{
			revalidateOnFocus: false,
			revalidateIfStale: false,
		}
	);
	console.log(searchResults);
	if (!session) {
		return (
			<>
				<Layout>
					<div className={container}>
						<h1 className={`${textMd} ${textWhite} ${textBold}`}>
							Please Sign In
						</h1>
					</div>
				</Layout>
			</>
		);
	}
	if (session) {
		return (
			<>
				<Head>
					<title>Next Spotify | Search</title>
					<meta name='description' content='Generated by create next app' />
					<link rel='icon' href='/favicon.ico' />
				</Head>

				<Layout updateQuery={updateQuery}>
					<div className={container}>
						<p className={`${textWhite} ${textBold} ${textMd}`}>Search</p>
						{!searchResults && query && (
							<ItemTrackSkeleton>Tracks</ItemTrackSkeleton>
						)}
						{!searchResults && query && (
							<ItemTrackSkeleton>Albums</ItemTrackSkeleton>
						)}
						{!searchResults && query && (
							<ItemTrackSkeleton>Artists</ItemTrackSkeleton>
						)}
						{searchResults && (
							<ItemTrack spotifyData={searchResults.tracks.items}>
								Tracks
							</ItemTrack>
						)}
						{searchResults && (
							<ItemTrack spotifyData={searchResults.albums.items}>
								Albums
							</ItemTrack>
						)}
						{searchResults && (
							<ItemTrack artists spotifyData={searchResults.artists.items}>
								Artists
							</ItemTrack>
						)}
					</div>
				</Layout>
			</>
		);
	}
	return (
		<Layout>
			<div className={container}>
				<p className={`${textMd} ${textWhite} ${textBold}`}>Loading...</p>
			</div>
		</Layout>
	);
}
